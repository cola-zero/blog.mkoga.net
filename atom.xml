<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[panic log]]></title>
  <subtitle><![CDATA[blog for me]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.mkoga.net//"/>
  <updated>2015-06-07T06:03:21.503Z</updated>
  <id>http://blog.mkoga.net//</id>
  
  <author>
    <name><![CDATA[cola-zero]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Org-modeで保存後自動でpublishする]]></title>
    <link href="http://blog.mkoga.net/2012/06/18/auto-publish-org-file/"/>
    <id>http://blog.mkoga.net/2012/06/18/auto-publish-org-file/</id>
    <published>2012-06-18T07:07:00.000Z</published>
    <updated>2015-06-07T06:03:21.503Z</updated>
    <content type="html"><![CDATA[<p><br>Emacsのsave-after-hookを変更して、orgファイルを保存したあとに自動でorg-publishを<br>行うようにした。<br></p>


<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(defun auto-export-my-blog ()&#10;  (let* ((project-plist (cdr (assoc &#34;blog&#34; org-publish-project-alist)))&#10;         (project-dir (expand-file-name&#10;                       (plist-get project-plist :base-directory))))&#10;    (save-excursion&#10;      (if (string= project-dir (file-name-directory buffer-file-name))&#10;          (org-publish-current-file)))))&#10;&#10;(add-hook &#39;after-save-hook&#10;          &#39;auto-export-my-blog)</span><br></pre></td></tr></table></figure>
<p><br>上記の例の場合、<code>org-publish-project-alis</code>に”blog”のエントリーがあること。<br></p><br><p><br>自分の現在の設定は以下の通り。<br></p>


<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(setq org-publish-project-alist&#10;   &#39;((&#34;blog&#34; .  (:base-directory &#34;~/work/blog.mkoga.net/source/_org_posts/&#34;&#10;                 :base-extension &#34;org&#34;&#10;                 :publishing-directory &#34;~/work/blog.mkoga.net/source/_posts/&#34;&#10;                 :sub-superscript &#34;&#34;&#10;                 :recursive t&#10;                 :publishing-function org-publish-org-to-html&#10;                 :headline-levels 4&#10;                 :html-extension &#34;markdown&#34;&#10;                 :body-only t))))</span><br></pre></td></tr></table></figure>
<p><br>この設定にすると、~/work/blog.mkoga.net/source/_org_posts/以下にあるorgファイルを保存した時、<br>自動的にpublishされる。<br></p>]]></content>
    <summary type="html">
    <![CDATA[<p><br>Emacsのsave-after-hookを変更して、orgファイルを保存したあとに自動でorg-publishを<br>行うようにした。<br></p>


<figure class="highlight"><table><tr><td class="gutte]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[セキュリティさくら #03に参加してきた]]></title>
    <link href="http://blog.mkoga.net/2012/02/26/security-sakura-number-3/"/>
    <id>http://blog.mkoga.net/2012/02/26/security-sakura-number-3/</id>
    <published>2012-02-26T00:07:00.000Z</published>
    <updated>2015-06-07T06:03:21.503Z</updated>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2"><br><h2 id="sec-1"></h2><br><div class="outline-text-2" id="text-1"><br><br><p>2012年2月25日に熊本駅の前にある「くまもと森都心プラザ」<br>で開催されたセキュリティさくらに参加してきました。<br></p><br><br><br></div>

<div id="outline-container-1-1" class="outline-3"><br><h3 id="sec-1-1">自己紹介</h3><br><div class="outline-text-3" id="text-1-1"><br><br><p>はじめに参加者全員の自己紹介の時間がありました。<br>セキュリティの専門家だけでなく、さまざまな分野から<br>様々な年齢層（１０代〜６０代）の方々が集まっていました。<br></p><br></div>

<p></p></div><p></p>
<div id="outline-container-1-2" class="outline-3"><br><h3 id="sec-1-2">Advanced Persistent Threat</h3><br><div class="outline-text-3" id="text-1-2"><br><br><p>名古屋大学の高倉　弘喜先生がお話してくれました。<br>現在実際に起きている攻撃の手法とその対策方法を非常にわかりやすく<br>解説していただきました。<br></p><br><p><br>アプリの対応状況によりOSのアップデートをすべてのマシンですぐに<br>実行することは現実問題として難しいため、<br>穴を塞いで侵入を防ぐ方法では、完全に攻撃からもう情報を守れない。<br>大事な事は、最も重要なデータを持ちださせないためにどう対処するか<br>ということだ。とおっしゃっていました。<br></p><br><p><br>やはり全てを解決する「銀の弾」はなく、対策の効果とコストを考え<br>ながら方法を選んでいくしかないですね。<br>先生がとても楽しそうにお話していたのが印象に残っています。<br>攻撃手法を聞いているときには、まるでスパイ映画のあらすじを<br>聞いているような気分になりました。<br></p><br></div>

<p></p></div><p></p>
<div id="outline-container-1-3" class="outline-3"><br><h3 id="sec-1-3">Androidマルウェアと対策ソフトの実情</h3><br><div class="outline-text-3" id="text-1-3"><br><br><p>自分も使っているAndroidのマルウェア対策について<br>カスペルスキーのチーフセキュリティエヴァン <b>ゲ</b> リスト<br>の前田典彦さんの発表でした。<br></p><br><p><br>Android向けのウィルスがここ半年ほどで急増していることを<br>示されたあと、マルウェアの例をいくつか紹介していただきました。<br>非常に幼稚なマルウェアでも、攻撃者が欲しい情報がとれてしまうことに<br>驚きました。<br></p><br></div>

<p></p></div><p></p>
<div id="outline-container-1-4" class="outline-3"><br><h3 id="sec-1-4">LT</h3><br><div class="outline-text-3" id="text-1-4"><br><br><p>今回のLTは３件、どれもジャンルが異なるバラエティ豊かな発表でした。<br></p><br></div>

<div id="outline-container-1-4-1" class="outline-4"><br><h4 id="sec-1-4-1">マルウェア解析を妨害するもの</h4><br><div class="outline-text-4" id="text-1-4-1"><br><br><p>マルウェアの解析を困難にするアンチデバッギングについての発表でした。<br>デバッガ上やVM上で動作している場合にはそれを検知して異なる振る舞いを<br>するマルウェアがあることは知りませんでした。<br>残念ながら時間の都合上デモはありませんでしたが、<br>懇親会の２次会で見せて頂きました。<br></p><br></div>

<p></p></div><p></p>
<div id="outline-container-1-4-2" class="outline-4"><br><h4 id="sec-1-4-2">地域からのセキュリティUP</h4><br><div class="outline-text-4" id="text-1-4-2"><br><br><p>大分県のハイパーネットワーク社会研究所にどのような相談が寄せられているのか<br>紹介されました。会場はその内容に思わず笑いが起こっましたが、知らないと<br>とても怖いだろうと思います。<br>情報リテラシーをどう上げていくかは難しい問題ですね。<br></p><br></div>

<p></p></div><p></p>
<div id="outline-container-1-4-3" class="outline-4"><br><h4 id="sec-1-4-3">ハードウェアセキュリティ(仮題)</h4><br><div class="outline-text-4" id="text-1-4-3"><br><br><p>いろいろ「アレ」だったので省略。<br>興味深い内容でした。<br></p><br></div>

<p></p></div><p></p>
<div id="outline-container-1-4-4" class="outline-4"><br><h4 id="sec-1-4-4">まとめ</h4><br><div class="outline-text-4" id="text-1-4-4"><br><br><p>すごく楽しい勉強会でした。 <b>良い意味で</b> 変態な方がいっぱい居たし、<br>みんなニコニコしながら熱い交流がありました。<br>主催された <a href="http://twitter.com/#!/greenz_greenz" target="_blank" rel="external">@greenz_greenz</a> さん、参加された皆様、ありがとうございました！<br></p></div><br></div><br></div><br></div>
]]></content>
    <summary type="html">
    <![CDATA[<div id="outline-container-1" class="outline-2"><br><h2 id="sec-1"></h2><br><div class="outline-text-2" id="text-1"><br><br><p>2012年2月25日に熊本]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[VMware Fusion 4でGuest OSをguiなしで起動する方法]]></title>
    <link href="http://blog.mkoga.net/2012/02/15/run-vmware-fusion-4-in-nogui-headless/"/>
    <id>http://blog.mkoga.net/2012/02/15/run-vmware-fusion-4-in-nogui-headless/</id>
    <published>2012-02-14T16:39:00.000Z</published>
    <updated>2015-06-07T06:03:21.503Z</updated>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2"><br><h2 id="sec-1"></h2><br><div class="outline-text-2" id="text-1"><br><br><p>ずっと方法がわからなかったが、ついに実現したので、メモ。<br></p><br><p><br>以下のディレクトリにあるvmrunコマンドを使う。<br></p><blockquote><br><br><p>/Applications/VMware Fusion.app/Contents/Library<br></p><br></blockquote><br><br><br><p><br>マニュアルは<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>にある。<br></p><br><p><br>上記ディレクトリをPATHに追加したら、以下のコマンドで起動する。<br></p><blockquote><br><br><p>$ vmrun ~/Documents/Virtual\ Machines.localized/VM-Name.vmwarevm/VM-Name.vmx nogui<br></p><br></blockquote><br><br><br><p><br>以上。<br></p><br><br><div id="footnotes"><br><h2 class="footnotes">Footnotes: </h2><br><div id="text-footnotes"><br><p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> <a href="http://www.vmware.com/support/developer/vix-api/vix111_vmrun_command.pdf" target="_blank" rel="external">http://www.vmware.com/support/developer/vix-api/vix111_vmrun_command.pdf</a><br></p></div><br></div>

<p></p></div><br></div><p></p>
]]></content>
    <summary type="html">
    <![CDATA[<div id="outline-container-1" class="outline-2"><br><h2 id="sec-1"></h2><br><div class="outline-text-2" id="text-1"><br><br><p>ずっと方法がわからなかった]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Safariの初期化]]></title>
    <link href="http://blog.mkoga.net/2011/12/08/safari/"/>
    <id>http://blog.mkoga.net/2011/12/08/safari/</id>
    <published>2011-12-07T17:02:00.000Z</published>
    <updated>2015-06-07T06:03:21.502Z</updated>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2"><br><h2 id="sec-1"></h2><br><div class="outline-text-2" id="text-1"><br><br><br><p><br>最近はChromeを主に使っていたのだけど、久しぶりにSafariを<br>起動したら、最初の操作で落ちるようになってしまった。<br></p><br><p><br>参考したサイト<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>にあるように、初期化を行ったら起動するようになった。<br>自分の環境では、$HOME/Library/Preferences/com.apple.Safari.plist<br>を移動して初期化したら無事起動するようになった。<br></p><br><p><br>原因がわからないのがとても不安&hellip;<br></p><br><br><br><div id="footnotes"><br><h2 class="footnotes">Footnotes: </h2><br><div id="text-footnotes"><br><p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> <a href="http://tukaikta.blog135.fc2.com/blog-entry-59.html" target="_blank" rel="external">Mac：Safariを手動でリセット。 | Macとかの雑記帳:Safari</a><br></p></div><br></div>

<p></p></div><br></div><p></p>
]]></content>
    <summary type="html">
    <![CDATA[<div id="outline-container-1" class="outline-2"><br><h2 id="sec-1"></h2><br><div class="outline-text-2" id="text-1"><br><br><br><p><br>最近はCh]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[BEGIN SRCの補完]]></title>
    <link href="http://blog.mkoga.net/2011/11/25/completion-of-begin-src/"/>
    <id>http://blog.mkoga.net/2011/11/25/completion-of-begin-src/</id>
    <published>2011-11-25T05:47:00.000Z</published>
    <updated>2015-06-07T06:03:21.502Z</updated>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2"><br><h2 id="sec-1">BEGIN_SRCの補完</h2><br><div class="outline-text-2" id="text-1"><br><br><p>org-modeで文章を書いていて、ソースコードなどを埋め込む場合、#+で始まるブロックで<br>囲む必要がある。<br></p><br><br><br><pre class="src src-org"><span style="color: #708183; font-style: italic;">#+BEGIN_HTML</span><br><span style="color: #bd3612;">bra, bra, bra…</span><br><span style="color: #708183; font-style: italic;">#+END_HTML</span><br></pre><br><br><br><p><br>これをいちいち打つのは面倒なので、何か方法があるはずだと、org-ja<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup> を見てみたら、やっぱりあった。<br></p><br><p><br>15.2章の ‘Easy Templates’より。”&lt;”の後にセレクタを入力し、&lt;TAB&gt;で展開できる。<br></p><blockquote><br><br><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><br><caption></caption><br><colgroup><col class="left"><col class="left"><col class="left"><col class="left"><br></colgroup><br><tbody><br><tr><td class="left"><code>s&#39;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;</code>#+begin_src</td><td class="left">&hellip;</td><td class="left">#+end_src’</td></tr><br><tr><td class="left"><code>e&#39;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;</code>#+begin_example</td><td class="left">&hellip;</td><td class="left">#+end_example’</td></tr><br><tr><td class="left"><code>q&#39;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;</code>#+begin_quote</td><td class="left">&hellip;</td><td class="left">#+end_quote’</td></tr><br><tr><td class="left"><code>v&#39;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;</code>#+begin_verse</td><td class="left">&hellip;</td><td class="left">#+end_verse’</td></tr><br><tr><td class="left"><code>c&#39;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;</code>#+begin_center</td><td class="left">&hellip;</td><td class="left">#+end_center’</td></tr><br><tr><td class="left"><code>l&#39;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;</code>#+begin_latex</td><td class="left">&hellip;</td><td class="left">#+end_latex’</td></tr><br><tr><td class="left"><code>L&#39;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;</code>#+latex:’</td><td class="left"></td><td class="left"></td></tr><br><tr><td class="left"><code>h&#39;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;</code>#+begin_html</td><td class="left">&hellip;</td><td class="left">#+end_html’</td></tr><br><tr><td class="left"><code>H&#39;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;</code>#+html:’</td><td class="left"></td><td class="left"></td></tr><br><tr><td class="left"><code>a&#39;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;</code>#+begin_ascii</td><td class="left">&hellip;</td><td class="left">#+end_ascii’</td></tr><br><tr><td class="left"><code>A&#39;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;</code>#+ascii:’</td><td class="left"></td><td class="left"></td></tr><br><tr><td class="left"><code>i&#39;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;</code>#+include:’</td><td class="left">line</td><td class="left"></td></tr><br></tbody><br></table><br><br><br></blockquote><br><br><br><br><br><div id="footnotes"><br><h2 class="footnotes">Footnotes: </h2><br><div id="text-footnotes"><br><p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> <a href="https://github.com/org-mode-doc-ja/org-ja" target="_blank" rel="external">org-mode-doc-ja/org-ja</a><br></p></div><br></div>

<p></p></div><br></div><p></p>
]]></content>
    <summary type="html">
    <![CDATA[<div id="outline-container-1" class="outline-2"><br><h2 id="sec-1">BEGIN_SRCの補完</h2><br><div class="outline-text-2" id="text-1"><br><br><p>o]]>
    </summary>
    
      <category term="Emacs Org-mode" scheme="http://blog.mkoga.net/categories/Emacs-Org-mode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[org-mac-protocol]]></title>
    <link href="http://blog.mkoga.net/2011/11/09/org-mac-protocol/"/>
    <id>http://blog.mkoga.net/2011/11/09/org-mac-protocol/</id>
    <published>2011-11-08T15:28:00.000Z</published>
    <updated>2015-06-07T06:03:21.502Z</updated>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2"><br><h2 id="sec-1">org-mac-protocolの設定</h2><br><div class="outline-text-2" id="text-1"><br><br><p>org-modeをemacsclientを使って外部の情報を取り込める仕組み。<br></p><br><p><br>今回は、Webブラウザ(Safari, Chrome)からorg-modeへリンクを取り込めるようにする。<br></p><br><p><br>これを使うと、blogを書くときに、urlとタイトルを別々にコピーする必要がなくなった。<br></p><br></div>

<div id="outline-container-1-1" class="outline-3"><br><h3 id="sec-1-1">設定</h3><br><div class="outline-text-3" id="text-1-1"><br><br><br></div>

<div id="outline-container-1-1-1" class="outline-4"><br><h4 id="sec-1-1-1">org-protocol</h4><br><div class="outline-text-4" id="text-1-1-1"><br><br><p>まずはorg-protocol<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>を有効にする。org-protocolはcontribなので、load-pathに<br>contribのディレクトリを追加する必要がある。<br><figure class="highlight"><figcaption><span>setting-for-org-protocol.el</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(add-to-list &#39;load-path &#34;/path/to/org-mode/contrib/lisp&#34;)&#10;(require &#39;org-protocol)</span><br></pre></td></tr></table></figure><br><br></p></div>

<p></p></div><p></p>
<div id="outline-container-1-1-2" class="outline-4"><br><h4 id="sec-1-1-2">org-mac-protocol</h4><br><div class="outline-text-4" id="text-1-1-2"><br><br><p>org-mac-protocol<sup><a class="footref" name="fnr.2" href="#fn.2">2</a></sup>は、org-protocolをMacOSX上で使えるようにしたもの。<br>まずはgit cloneし、必要なファイルを必要な場所へ。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/claviclaws/org-mac-protocol.git</span><br><span class="line">$ <span class="keyword">cp</span> -<span class="keyword">r</span> org-mac-protocol/*.scpt org-mac-protocol/orgQSLib ~/Library/Scripts</span><br></pre></td></tr></table></figure><br><br>~/Library/Scriptsがない場合は先に作る必要があります。<br></p><br><p><br>そして以下の設定<br><figure class="highlight"><figcaption><span>setting-for-org-mac-protocol.el</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(add-to-list &#39;load-path &#34;/path/to/org-mac-protocol&#34;)&#10;(require &#39;org-mac-protocol)</span><br></pre></td></tr></table></figure><br></p></div>

<p></p></div><p></p>
<div id="outline-container-1-1-3" class="outline-4"><br><h4 id="sec-1-1-3">QuickSilver</h4><br><div class="outline-text-4" id="text-1-1-3"><br><br><p>環境設定-&gt; Catalog -&gt; Scripts -&gt; Scripts(User)にチェックを入れる。<br></p><br></div><br></div>

<p></p></div><p></p>
<div id="outline-container-1-2" class="outline-3"><br><h3 id="sec-1-2">使用方法</h3><br><div class="outline-text-3" id="text-1-2"><br><br><p>Chromeでコピーしたいページを開き、QuickSilverでorg-link.scptを選択。<br></p><br><p><br>Emacsで<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M-<span class="keyword">x</span> org-insert-<span class="keyword">link</span></span><br></pre></td></tr></table></figure><br><br>したあと、ミニバッファに貼り付け(C-y)すると、リンクとその説明が正しく<br>貼り付けれれた。<br></p><br></div><br></div>

<p></p></div><p></p>
<div id="outline-container-2" class="outline-2"><br><h2 id="sec-2">まとめ</h2><br><div class="outline-text-2" id="text-2"><br><br><p>AppleScriptの魔法を使い、Emacsとほかのアプリケーションの連携がうまく<br>できるようになった。<br></p><br><br><div id="footnotes"><br><h2 class="footnotes">Footnotes: </h2><br><div id="text-footnotes"><br><p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> <a href="http://orgmode.org/worg/org-contrib/org-protocol.html" target="_blank" rel="external">org-protocol.el – Intercept calls from emacsclient to trigger custom actions:Google Chrome</a><br></p><br><br><br><p class="footnote"><sup><a class="footnum" name="fn.2" href="#fnr.2">2</a></sup> <a href="https://github.com/claviclaws/org-mac-protocol" target="_blank" rel="external">claviclaws/org-mac-protocol - GitHub:Google Chrome</a><br><a href="#iTunes-8F41FA7653E36F99">Song 6:iTunes</a><br></p></div><br></div>

<p></p></div><br></div><p></p>
]]></content>
    <summary type="html">
    <![CDATA[<div id="outline-container-1" class="outline-2"><br><h2 id="sec-1">org-mac-protocolの設定</h2><br><div class="outline-text-2" id="text-1"><br><]]>
    </summary>
    
      <category term="Emacs" scheme="http://blog.mkoga.net/categories/Emacs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[KFP#x06に参加してきた]]></title>
    <link href="http://blog.mkoga.net/2011/10/22/kfp-x06/"/>
    <id>http://blog.mkoga.net/2011/10/22/kfp-x06/</id>
    <published>2011-10-22T13:25:00.000Z</published>
    <updated>2015-06-07T06:03:21.502Z</updated>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2"><br><h2 id="sec-1"></h2><br><div class="outline-text-2" id="text-1"><br><br><br><img src="/images/KPF_logo.gif" class="top" title="Logo of KPF"><br><br></div>

<p></p></div><p></p>
<div id="outline-container-2" class="outline-2"><br><h2 id="sec-2">KFP#x06</h2><br><div class="outline-text-2" id="text-2"><br><br><p>  第x06回、KFP(Kumamoto Programming Freaks)に参加してきました。<br>  熊本で開催された、プログラミングに関する勉強会です。<br>  参加者は、熊本はもちろん、東京、福岡や、宮崎など各地から参加されていました。<br>  本人には伝えることができませんでしたが、同じ学科の後輩もいました。<br></p><br></div>

<p></p></div><p></p>
<div id="outline-container-3" class="outline-2"><br><h2 id="sec-3">感じたこと</h2><br><div class="outline-text-2" id="text-3"><br><br><p>  すべての発表でメモを取ったわけではないのですが(ごめんなさい。)、自分の感じたことメモです。<br></p><br></div>

<div id="outline-container-3-1" class="outline-3"><br><h3 id="sec-3-1">関数型言語と定理証明</h3><br><div class="outline-text-3" id="text-3-1"><br><br><p>   <a href="http://twitter.com/snisimu" target="_blank" rel="external">@snisimu</a> さんの発表でした。<br></p><br><p><br>   関数型言語の簡単な例から、定理証明への対応付けは理解しやすかったです。<br>   現在は証明言語からHW記述言語へコンバートすることを考えていらっしゃるようで、<br>   今後趣味として証明付きのCPUなどを作りたいそうです。<br>   関数型のHW記述言語と言われると、<a href="http://raintown.org/lava" target="_blank" rel="external">Lava</a> や<br>   <a href="http://hackage.haskell.org/package/clash" target="_blank" rel="external">CLasH</a> を思い出しました。<br></p></div>

<p></p></div><p></p>
<div id="outline-container-3-2" class="outline-3"><br><h3 id="sec-3-2">プログラミング、デザイン、アート、スタートアップ</h3><br><div class="outline-text-3" id="text-3-2"><br><br><p>   <a href="http://twitter.com/shunsuk" target="_blank" rel="external">@shunsuk</a> さんの発表でした。<br></p><br><p><br>   スタートアップで働かれている <a href="http://twitter.com/shunsuk" target="_blank" rel="external">@shunsuk</a> さんが<br>   現在考えていらっしゃることを発表してくださいました。<br>   プログラミング、デザイン(≒設計)、マーケティングを同時にできるよな人材が必要ということで、<br>   <a href="http://twitter.com/shunsuk" target="_blank" rel="external">shunsuk</a> さんが将来どうなりたいのか、<br>   少しだけ見せていただけた気がします。<br></p><br></div>

<p></p></div><p></p>
<div id="outline-container-3-3" class="outline-3"><br><h3 id="sec-3-3">C#で作るWindowsのWindowを制御するDSL</h3><br><div class="outline-text-3" id="text-3-3"><br><br><p>   <a href="http://twitter.com/valvallow" target="_blank" rel="external">valvallow</a> さんの発表でした。<br></p><br><p><br>   Win32 APIを叩き、マウスとキーボードの動作を自動化するDSLを開発されていました。<br>   マウスの位置は座標で指定し、簡単なREPLで実装されれいたようです。<br><br>   下記の質問をしました。<br></p><ul><br><li>Q: Capibaraなどのように、ボタンをラベルの内容で指定できるのか？<br><ul><br><li>A: 現在はできない。ボタンのIDしていするAPIは存在する。<br></li><br></ul><br><br></li><br><li>Cocoaへのポートは可能か？<br><ul><br><li>A: ぜひやってください。<br></li><br></ul><br><br></li><br></ul><br><br><br></div>

<p></p></div><p></p>
<div id="outline-container-3-4" class="outline-3"><br><h3 id="sec-3-4">まとめ</h3><br><div class="outline-text-3" id="text-3-4"><br><br><p>   直接仕事でコードを書いている方、仕事を楽にするためにコッソリ(?)書かれてる方や、ビジネス寄り<br>   の方など、様々な方とお話できて、とても良い刺激になりました。<br>   自分のロールモデルにいいとこ取りしていきたいと思います。<br></p></div>

<p></p></div><p></p>
<div id="outline-container-3-5" class="outline-3"><br><h3 id="sec-3-5">その他</h3><br><div class="outline-text-3" id="text-3-5"><br><br><ul><br><li><a href="http://valvallow.blogspot.com/2011/10/kpf.html" target="_blank" rel="external">熊本プログラミングフリークス（KPF） #x06 を開催しました。 - vallog</a><br></li><br><li><a href="http://togetter.com/li/204354" target="_blank" rel="external">KPF #x06 - Togetter</a><br></li><br></ul><br><br></div><br></div><br></div>
]]></content>
    <summary type="html">
    <![CDATA[<div id="outline-container-1" class="outline-2"><br><h2 id="sec-1"></h2><br><div class="outline-text-2" id="text-1"><br><br><br><img src="/i]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Octopressでorg-modeを使う方法]]></title>
    <link href="http://blog.mkoga.net/2011/10/20/use-org-mode-with-octopress/"/>
    <id>http://blog.mkoga.net/2011/10/20/use-org-mode-with-octopress/</id>
    <published>2011-10-20T05:00:00.000Z</published>
    <updated>2015-06-07T06:03:21.502Z</updated>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2"><br><h2 id="sec-1"></h2><br><div class="outline-text-2" id="text-1"><br><br><p><a href="http://blog.mkoga.net.dev/blog/2011/10/18/new-post/" target="_blank" rel="external">前回のエントリー</a><br>の続き。<br><img src="/images/org2octopress.png" class="right" title="org2octopress"><br><br></p><br></div>

<div id="outline-container-1-1" class="outline-3"><br><h3 id="sec-1-1">結果</h3><br><div class="outline-text-3" id="text-1-1"><br><br><p>   前回は、org-modeからhtmlを生成するために、<a href="https://github.com/bdewey/org-ruby" target="_blank" rel="external">org-ruby</a> を使おうとしてたが、<br>   少しググったところ、OctoressがラップしているJekyllとOrg-modeを組み合わせて使っている人がいた<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>。<br>   すでにEmacs上にはOrg-modeからhtmlへの変換が実現しているため、こちらを使う方が確実。<br>   結局Org-modeからhtmlを吐き出し、それをOctopressに食わせるようにした。asdf<br></p><br></div>

<p></p></div><p></p>
<div id="outline-container-1-2" class="outline-3"><br><h3 id="sec-1-2">変更点</h3><br><div class="outline-text-3" id="text-1-2"><br><br><p>Org-mode のファイルは、新たにorg/_postsディレクトリを作成し、そこに生成する。<br></p><br><p><br>この動作を実現するため、Rakefileの一部を以下のように変更した。<br><script src="//gist.github.com/1300490.js"></script><br>先頭のチャンクは、rake new_postで生成するファイルの場所と拡張子を変更している<sup><a class="footref" name="fnr.2" href="#fn.2">2</a></sup>。<br>後半の２つのチャンクは、new_postとnew_pageで生成するファイルのヘッダをorg-modeにあわせて変更している。<br></p><br><p><br>さらに、<sup><a class="footref" name="fnr.1.2" href="#fn.1">1</a></sup>よりorg-jekyllをインストールし、以下の設定を自分の.emacsに追加した。<br><script src="//gist.github.com/1300497.js"></script><br><br></p></div>

<p></p></div><p></p>
<div id="outline-container-1-3" class="outline-3"><br><h3 id="sec-1-3">投稿手順</h3><br><div class="outline-text-3" id="text-1-3"><br><br><p>あとは、rakeコマンドで生成されたファイルを編集し、<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">M</span>-x org-publish</span><br></pre></td></tr></table></figure><br>を実行するとsource/_posts ディレクトリにhtmlが生成される。その後、ターミナル上で<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>rake generate</span><br></pre></td></tr></table></figure><br>を実行すると、各ポストが生成される。<br></p><br></div>

<p></p></div><p></p>
<div id="outline-container-1-4" class="outline-3"><br><h3 id="sec-1-4">まとめ</h3><br><div class="outline-text-3" id="text-1-4"><br><br><p>一応org-modeを使うことができるようになった。。<br></p><br><br><div id="footnotes"><br><h2 class="footnotes">Footnotes: </h2><br><div id="text-footnotes"><br><p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> <a href="http://juanreyero.com/open/org-jekyll/" target="_blank" rel="external">http://juanreyero.com/open/org-jekyll/</a><br></p><br><br><br><p class="footnote"><sup><a class="footnum" name="fn.2" href="#fnr.2">2</a></sup> この変更はstylesheetに関するRakeの動作にも影響があるため、source/stylesheetsからorg/stylesheetsにリンクを作成した。<br></p></div><br></div><br></div>

<p></p></div><br></div><p></p>
]]></content>
    <summary type="html">
    <![CDATA[<div id="outline-container-1" class="outline-2"><br><h2 id="sec-1"></h2><br><div class="outline-text-2" id="text-1"><br><br><p><a href="http]]>
    </summary>
    
      <category term="octopress" scheme="http://blog.mkoga.net/categories/octopress/"/>
    
  </entry>
  
</feed>